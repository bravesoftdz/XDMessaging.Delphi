unit TestXDMessaging.Serialization;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework,
  XDMessaging.Serialization.Serializer,
  XDMessaging.Messages.DataGram,
  System.JSON.Serializers;

type
  // Test methods for class TSerializer

  TestTSerializer = class(TTestCase)
  strict private
    FSerializer: TSerializer;
  private const
    JSON_STR = '{"type":"TDataGram","channel":"channel1","message":"hello","ver":"1.1"}';
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestDeserialize;
    procedure TestSerialize;
  end;

implementation

procedure TestTSerializer.SetUp;
begin
  FSerializer := TSerializer.Create;
end;

procedure TestTSerializer.TearDown;
begin
  FSerializer.Free;
  FSerializer := nil;
end;

procedure TestTSerializer.TestDeserialize;
var
  ReturnValue: TDataGram;
  data: string;
begin
  ReturnValue := FSerializer.Deserialize<TDataGram>(JSON_STR);

  CheckEquals('TDataGram', ReturnValue.AssemblyQualifiedName);
  CheckEquals('channel1', ReturnValue.Channel);
  CheckEquals('hello', ReturnValue.Message);
  CheckEquals('1.1', ReturnValue.Version);
end;

procedure TestTSerializer.TestSerialize;
var
  ReturnValue: string;
  obj: TDataGram;
begin
  // TODO: Setup method call parameters
  obj := TDataGram.Create;
  obj.AssemblyQualifiedName := 'TDataGram';
  obj.Channel := 'channel1';
  obj.Message := 'hello';
  ReturnValue := FSerializer.Serialize<TDataGram>(obj);
  // TODO: Validate method results
  CheckEquals(JSON_STR, ReturnValue);
  obj.Free;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTSerializer.Suite);
end.

